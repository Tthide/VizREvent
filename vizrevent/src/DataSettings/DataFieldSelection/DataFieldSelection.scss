@use '../../_design-variables.scss' as dv;

.data-field-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: dv.$spacing-small;
    display: flex;
    flex-direction: column;
    position: relative;
    height: 100%;

    thead {
        flex: 0 0 auto;
        display: table;
        width: 100%;
        table-layout: fixed;
        border-left: dv.$border-thin-primary;
    }

    tbody {
        flex: 1 1 auto; // take all remaining space
        display: block;
        overflow-y: scroll;
        overflow-x: hidden;

        width: 100%;
        table-layout: fixed;

        scrollbar-width: thin;
        scrollbar-color: dv.$color-secondary transparent;
    }



    tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
        overflow: hidden; // clip content if too big
    }

    th,
    td {
        padding: dv.$spacing-smallest;
        text-align: left;
        font-size: dv.$font-size-smallest;
        box-sizing: border-box;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 3.3rem; // fixed cell height
        max-height: 3.3rem;
    }

    td {
        color: dv.$color-primary;
        border: dv.$border-thinner-primary;

    }

    th {

        background-color: dv.$color-primary;
        border: dv.$border-thinner-quaternary;
        border-top: 0;
        border-bottom: dv.$border-thinner-primary;
        color: dv.$color-quaternary;
        position: sticky;
        top: 0;
        z-index: 20;
    }

    tbody tr:hover {
        background-color: lighten(dv.$color-quaternary, 5%);
    }

    .selected-row {
        background-color: lighten(dv.$color-quaternary, 5%);
        cursor: 'pointer';
    }

    input[type="checkbox"] {
        cursor: pointer;
        accent-color: dv.$color-secondary;
    }


    thead,
    tbody tr {
        table-layout: fixed; // enforce fixed layout
    }

    // Number of fixed-width columns (excluding last)
    $fixed-columns: 3;

    // Total table width is 100%, distribute fixed widths accordingly
    // For example, fixed columns = 16% each
    // Last column fills remaining space

    // You can adjust this fixed width as needed
    $fixed-width: 16%;

    // Assign fixed width for first 6 columns:
    @for $i from 1 through $fixed-columns {

        th:nth-child(#{$i}),
        td:nth-child(#{$i}) {
            width: $fixed-width;
            max-width: $fixed-width;
            min-width: $fixed-width;
        }
    }

    // Last column takes remaining space:
    th:nth-child(n + 7),
    td:nth-child(n + 7) {
        width: auto;
        min-width: 0; // allow shrinking if needed
    }

}

.fallback-message {
    @include dv.fallback-message;
}